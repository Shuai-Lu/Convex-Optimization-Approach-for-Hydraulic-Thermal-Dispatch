function model_buildings_fixed(varargin)
if find(strcmp(varargin, 'DisplayTime'))
    DisplayTime = varargin{find(strcmp(varargin, 'DisplayTime'))+1};
else
    DisplayTime = 1;
end
if DisplayTime
    fprintf('%-40s\t\t','- model_fixed building');
    t0 = clock;
end
%%
global data model_fixed;
%% Params
[loc_buildingno, loc_node, loc_C, loc_R, loc_num] = ...
    deal(1,2,3,4,5);
[loc_Tau_low, loc_Tau_up, loc_Tau_opt] = deal(1,2,3);
num_heatperiod = data.period*data.interval.electricity/data.interval.heat;

%% Data
Tau_out = data.profiles.data(data.profiles.bus(:,2)==4,:)';
t = 1:num_heatperiod;
data.buildings.Tau_out(t,1) = Tau_out( ...
    fix((t-1)*data.interval.heat)/data.interval.electricity+1,1);
num_load = size(data.buildings.param,1);
ratio = exp(-data.interval.heat./data.buildings.param(:,loc_R)' ...
    ./data.buildings.param(:,loc_C)');

%% Define
model_fixed.var.buildings.Tau_in = sdpvar(num_heatperiod, num_load);
model_fixed.var.buildings.h_load = sdpvar(num_heatperiod, num_load);
model_fixed.var.buildings.Tau_out = sdpvar(num_heatperiod, 1);

%% Modeling
% % Temperature equations
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.h_load >= 0) : '');
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_in(1,:) == ...
    ratio * data.initialParam.buildings.temperature(loc_Tau_opt) + ...
    (1-ratio) .* ...
    (model_fixed.var.buildings.Tau_out(1,1) + ...
    data.buildings.param(:,loc_R)'./data.buildings.param(:,loc_num)' .* ...
    model_fixed.var.buildings.h_load(1,:))) : ...
    'Buildings: Tau equation');
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_in(2:end,:) == ...
    ones(num_heatperiod-1,1)*ratio .* ...
    model_fixed.var.buildings.Tau_in(1:end-1,:) + ...
    ones(num_heatperiod-1,1) *(1-ratio) .* ...
    (model_fixed.var.buildings.Tau_out(2:end,1)*ones(1,num_load) + ...
    ones(num_heatperiod-1,1) * ...
    (data.buildings.param(:,loc_R)./data.buildings.param(:,loc_num))' .* ...
    model_fixed.var.buildings.h_load(2:end,:))) : ...
    'Buildings: Tau equation');

% % Temperature limit
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_in >= data.initialParam.buildings.temperature(loc_Tau_low)) : ...
    'Buildings: temperature limit');
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_in <= data.initialParam.buildings.temperature(loc_Tau_up)) : ...
    'Buildings: temperature limit');
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_in(end,:) == ...
    data.initialParam.buildings.temperature(loc_Tau_opt)) : ...
    'Buildings: endpoint temperature');

% % Average Temperature
model_fixed.cons = model_fixed.cons + ( ...
    (ones(num_load, num_heatperiod)*model_fixed.var.buildings.Tau_in == ...
    num_heatperiod*data.initialParam.buildings.temperature(loc_Tau_opt)) : ...
    'Buildings: average Tau');

% % Tau_out
model_fixed.cons = model_fixed.cons + ( ...
    (model_fixed.var.buildings.Tau_out == ...
    data.buildings.Tau_out) : 'Tau_out');


%%
if DisplayTime
    t1 = clock;
    fprintf('%10.2f%s\n', etime(t1,t0), 's');
end
end