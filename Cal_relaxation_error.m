function Cal_relaxation_error(varargin)
if find(strcmp(varargin, 'DisplayTime'))
    DisplayTime = varargin{find(strcmp(varargin, 'DisplayTime'))+1};
else
    DisplayTime = 1;
end
if DisplayTime
    fprintf('%-40s\t\t','- Calculate relaxation error');
    t0 = clock;
end
global data model;
loc_rough = 5; loc_flag_pump = 16; loc_eta_pump = 17;
c_w = data.BasicParam.Massflow.HeatCapacity;     % kJ/(kg*¡æ)
gravity = data.BasicParam.gravity;                     % m/s^2
eta_pump = data.heatingnetwork.pipe(data.heatingnetwork.pipe(:,loc_flag_pump)==1, loc_eta_pump);
num_initialtime = data.initialParam.heatingnetwork.num_initialtime;
num_heatperiod = data.period*data.interval.electricity/data.interval.heat;
length_error = length(model.record.relaxation_error);
k = 1/3600*c_w;

%% error of alpha & beta
t = 1:num_heatperiod;
model.record.relaxation_error(length_error+1).aux_alpha_product(:,:,t) = ...
    (abs(model.record.solution(end).solution.heatingnetwork.aux_alpha_product(1:end-1,:,t) - ...
    model.record.solution(end).solution.heatingnetwork.aux_alpha(1:end-1,:,t) .* ...
    model.record.solution(end).solution.heatingnetwork.aux_alpha(2:end,:,t)));

model.record.relaxation_error(length_error+1).aux_beta_product(:,:,t) = ...
    (abs(model.record.solution(end).solution.heatingnetwork.aux_beta_product(1:end-1,:,t) - ...
    model.record.solution(end).solution.heatingnetwork.aux_beta(1:end-1,:,t) .* ....
    model.record.solution(end).solution.heatingnetwork.aux_beta(2:end,:,t)));
model.record.relaxation_error(length_error+1).aux_product_max = ...
    max([max(max(max(model.record.relaxation_error(length_error+1).aux_alpha_product))), ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_beta_product)))]);

%% error of aux_M 
for t = 1:num_heatperiod
    i = 1:size(model.record.solution(end).solution.heatingnetwork.aux_M_alpha,1);
    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_alpha(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.Massflow(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;    
    model.record.relaxation_error(length_error+1).aux_M_alpha(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_M_alpha(i,:,t) - ...
        temp_0)./ ...
        temp_1;
    
    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_beta(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.Massflow(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;    
    model.record.relaxation_error(length_error+1).aux_M_beta(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_M_beta(i,:,t) - ...
        temp_0)./ ...
        temp_1;
end
model.record.relaxation_error(length_error+1).aux_M_max = ...
    max([max(max(max(model.record.relaxation_error(length_error+1).aux_M_alpha))), ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_M_beta)))]);

%% error of aux_h_pipe
for t = 1:num_heatperiod
    i = 1:size(model.record.solution(end).solution.heatingnetwork.aux_M_alpha,1);
    
    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_alpha(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;
    model.record.relaxation_error(length_error+1).aux_h_pipe_s_in_alpha(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_h_pipe_s_in_alpha(i,:,t) - ...
        temp_0)./ ...
        temp_1;
    
    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_alpha(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;
    model.record.relaxation_error(length_error+1).aux_h_pipe_r_in_alpha(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_h_pipe_r_in_alpha(i,:,t) - ...
        temp_0)./ ...
        temp_1;
    
    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_beta(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;    
    model.record.relaxation_error(length_error+1).aux_h_pipe_s_in_beta(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_h_pipe_s_in_beta(i,:,t) - ...
        temp_0)./ ...
        temp_1;

    temp_0 = model.record.solution(end).solution.heatingnetwork.aux_beta(i,:,t) .* ...
        model.record.solution(end).solution.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:);
    temp_1 =temp_0;
    temp_1(temp_1<1)=1;    
    model.record.relaxation_error(length_error+1).aux_h_pipe_r_in_beta(i,:,t) = ...
        abs(model.record.solution(end).solution.heatingnetwork.aux_h_pipe_r_in_beta(i,:,t) - ...
        temp_0)./ ...
        temp_1;
end
model.record.relaxation_error(length_error+1).aux_h_pipe_max = max([ ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_h_pipe_s_in_alpha))), ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_h_pipe_r_in_alpha))), ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_h_pipe_s_in_beta))), ...
    max(max(max(model.record.relaxation_error(length_error+1).aux_h_pipe_r_in_beta)))]);

%% error of h_pipe
t = num_initialtime+1:num_initialtime+num_heatperiod;
model.record.relaxation_error(length_error+1).h_pipe_s_in = ...
    abs(model.record.solution(end).solution.heatingnetwork.h_pipe_s_in(t,:) - ...
    k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_s_in(t,:))./ ...
    (k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_s_in(t,:));

model.record.relaxation_error(length_error+1).h_pipe_s_out = ...
    abs(model.record.solution(end).solution.heatingnetwork.h_pipe_s_out(t,:) - ...
    k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_s_out(t,:))./ ...
    (k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_s_out(t,:));

model.record.relaxation_error(length_error+1).h_pipe_r_in = ...
    abs(model.record.solution(end).solution.heatingnetwork.h_pipe_r_in(t,:) - ...
    k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_r_in(t,:))./ ...
    (k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_r_in(t,:));

model.record.relaxation_error(length_error+1).h_pipe_r_out = ...
    abs(model.record.solution(end).solution.heatingnetwork.h_pipe_r_out(t,:) - ...
    k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_r_out(t,:))./ ...
    (k*model.record.solution(end).solution.heatingnetwork.Massflow(t,:).* ...
    model.record.solution(end).solution.heatingnetwork.Tau_pipe_r_out(t,:));

model.record.relaxation_error(length_error+1).h_pipe_max = max( ...
    [max(max(model.record.relaxation_error(length_error+1).h_pipe_s_in)), ...
    max(max(model.record.relaxation_error(length_error+1).h_pipe_s_out)), ...
    max(max(model.record.relaxation_error(length_error+1).h_pipe_r_in)), ...
    max(max(model.record.relaxation_error(length_error+1).h_pipe_r_out))]);

%% error of Pressure_loss
for t = 1:num_heatperiod
    model.record.relaxation_error(length_error+1).Pressure_loss(t,:) = ...
        (model.record.solution(end).solution.heatingnetwork.Pressure_loss(t+num_initialtime,:) - ...
        1/3.6^2 * data.heatingnetwork.pipe(:,loc_rough)'.* ...
        model.record.solution(end).solution.heatingnetwork.Massflow(t+num_initialtime,:).^2) ./ ...
        model.record.solution(end).solution.heatingnetwork.Pressure_loss(t+num_initialtime,:);
end
model.record.relaxation_error(length_error+1).Pressure_loss_max = ...
    max(max(model.record.relaxation_error(length_error+1).Pressure_loss(:,:)));
    
%% error of Power_pump
for t = 1:num_heatperiod
    model.record.relaxation_error(length_error+1).Power_pump(t,:) = ...
         abs(model.record.solution(end).solution.heatingnetwork.Power_pump(t+num_initialtime,:) - ...
         1/3600*gravity/eta_pump * ...
         model.record.solution(end).solution.heatingnetwork.Pressure_pump(t+num_initialtime,:) .* ...
         model.record.solution(end).solution.heatingnetwork.Massflow(t+num_initialtime,1)) ./ ...
         model.record.solution(end).solution.heatingnetwork.Power_pump(t+num_initialtime,:);    
end
model.record.relaxation_error(length_error+1).Power_pump_max = ...
    max(max(model.record.relaxation_error(length_error+1).Power_pump(:,:)));

%%
model.record.relaxation_error(length_error+1).max = max( ...
    [model.record.relaxation_error(length_error+1).aux_product_max, ...
    model.record.relaxation_error(length_error+1).h_pipe_max, ...
    model.record.relaxation_error(length_error+1).aux_M_max, ...
    model.record.relaxation_error(length_error+1).aux_h_pipe_max, ...
    model.record.relaxation_error(length_error+1).Pressure_loss_max, ...
    model.record.relaxation_error(length_error+1).Power_pump_max]);
%%
if DisplayTime
    t1 = clock;
    fprintf('%10.2f%s\n', etime(t1,t0), 's');
end
end