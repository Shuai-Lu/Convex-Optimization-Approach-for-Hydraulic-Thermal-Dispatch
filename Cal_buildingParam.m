function cal_buildingParam(varargin)
if find(strcmp(varargin, 'DisplayTime'))
    DisplayTime = varargin{find(strcmp(varargin, 'DisplayTime'))+1};
else
    DisplayTime = 1;
end
if DisplayTime
    fprintf('%-40s\t\t','- Calculate building parameters');
    t0 = clock;
end
%%
global data;
[loc_buildingno, loc_node, loc_C, loc_R, loc_num] = ...
    deal(1,2,3,4,5);
num_building = size(data.buildings.param,1);
delta_alpha = varargin{1};
delta_beta = varargin{2};
set_type = varargin{3};
if nargin >= 4
    num_points = varargin{4}/2;
end
data.buildings.uncertainty.alpha_base(:,1) = exp(-data.interval.heat./ ...
    data.buildings.param(:,loc_R)./data.buildings.param(:,loc_C));
data.buildings.uncertainty.beta_base(:,1) = ...
    (1-data.buildings.uncertainty.alpha_base(:,1)) .* ...
    data.buildings.param(:,loc_R)./data.buildings.param(:,loc_num);

%% 正方形
if set_type == 0
    data.buildings.uncertainty.alpha(:,[1 2]) = ...
        data.buildings.uncertainty.alpha_base*(1 - delta_alpha)*ones(1,2);
    data.buildings.uncertainty.alpha(:,[3 4]) = ...
        data.buildings.uncertainty.alpha_base*(1 + delta_alpha)*ones(1,2);
    data.buildings.uncertainty.beta(:,[1 3]) = ...
        data.buildings.uncertainty.beta_base*(1 - delta_beta)*ones(1,2);
    data.buildings.uncertainty.beta(:,[2 4]) = ...
        data.buildings.uncertainty.beta_base*(1 + delta_beta)*ones(1,2);
end
%% 平行四边形
if set_type == 1
    data.buildings.uncertainty.alpha(:,[1 2]) = ...
        data.buildings.uncertainty.alpha_base*(1-delta_alpha)*ones(1,2);
    data.buildings.uncertainty.alpha(:,[3 4]) = ...
        data.buildings.uncertainty.alpha_base*(1+delta_alpha)*ones(1,2);
    
    data.buildings.uncertainty.beta(:,[1 4]) = ...
        (1 - delta_beta) .* (1-data.buildings.uncertainty.alpha(:,[1 4]))./ ...
        ((1 - (1+delta_alpha)*data.buildings.uncertainty.alpha_base(:,1))*ones(1,2)) .* ...
        data.buildings.uncertainty.beta_base;
    data.buildings.uncertainty.beta(:,[2 3]) = ...
        (1 + delta_beta) .* (1 - data.buildings.uncertainty.alpha(:,[2 3]))./ ...
        ((1 - (1-delta_alpha)*data.buildings.uncertainty.alpha_base(:,1))*ones(1,2)) .* ...
        data.buildings.uncertainty.beta_base;
end

%% 平行四边形 n points
theta = 0:1/(num_points-1):1;
if set_type == 2
    data.buildings.uncertainty.alpha(:,[1:num_points]) = ...
        (ones(num_building, 1)*(1-theta)).* ...
        ((1-delta_alpha)*data.buildings.uncertainty.alpha_base*ones(1,num_points)) + ...
        (ones(num_building, 1)*theta).* ...
        ((1+delta_alpha)*data.buildings.uncertainty.alpha_base*ones(1,num_points));
    data.buildings.uncertainty.alpha(:,[num_points+1:2*num_points]) = ...
        (ones(num_building, 1)*(1-theta)).* ...
        ((1-delta_alpha)*data.buildings.uncertainty.alpha_base*ones(1,num_points)) + ...
        (ones(num_building, 1)*theta).* ...
        ((1+delta_alpha)*data.buildings.uncertainty.alpha_base*ones(1,num_points));
    
    data.buildings.uncertainty.beta(:,[1:num_points]) = ...
        (1 - delta_beta) .* (1-data.buildings.uncertainty.alpha(:,[1:num_points]))./ ...
        ((1 - (1+delta_alpha)*data.buildings.uncertainty.alpha_base(:,1))*ones(1,num_points)) .* ...
        (data.buildings.uncertainty.beta_base*ones(1,num_points));
    data.buildings.uncertainty.beta(:,[num_points+1:2*num_points]) = ...
        (1 + delta_beta) .* (1 - data.buildings.uncertainty.alpha(:,[num_points+1:2*num_points]))./ ...
        ((1 - (1-delta_alpha)*data.buildings.uncertainty.alpha_base(:,1))*ones(1,num_points)) .* ...
        (data.buildings.uncertainty.beta_base*ones(1,num_points));
end
%%
if DisplayTime
    t1 = clock;
    fprintf('%8.2f%s\n', etime(t1,t0), 's');
end
end