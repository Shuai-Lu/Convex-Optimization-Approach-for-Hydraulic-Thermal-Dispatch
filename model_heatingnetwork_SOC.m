function model_heatingnetwork_SOC(varargin)
% ***************************************************
% Model of Heating Network
% No integer
% ***************************************************
if find(strcmp(varargin, 'DisplayTime'))
    DisplayTime = varargin{find(strcmp(varargin, 'DisplayTime'))+1};
else
    DisplayTime = 1;
end
if DisplayTime
    fprintf('%-40s\t\t','- Model heating network');
    t0 = clock;
end
%%
flag_McCormick = varargin{1};
flag_SOC = varargin{2};
flag_CF = varargin{3};
flag_CF_fixing_massflow = varargin{4};
%%
global data model;
% P1 = model.SOC.P1;
% P2 = model.SOC.P2;
[loc_fnode, loc_tnode, loc_length, loc_diameter, loc_rough, ...
    loc_conductivity, loc_flowrate_min, loc_flowrate_max, ...
    loc_tau_s_min, loc_tau_s_max, loc_tau_r_min, loc_tau_r_max, loc_flag_pump, loc_eta_pump, loc_flag_ecv] = ...
    deal(1,2,3,4,5,6,7,8,9,10,11,12,16,17,18);
[loc_nodeno, loc_nodetype] = deal(1,2);
[loc_initial_Tau_s, loc_initial_Tau_r, loc_initial_Tau_amb] = ...
    deal(1,2,3);
% %
data_pipe = data.heatingnetwork.pipe;
data_node = data.heatingnetwork.node;
data_initial = data.initialParam.heatingnetwork;
%% Data
rho_w = data.BasicParam.Massflow.Density/1e3;    % t/m^3;
c_w = data.BasicParam.Massflow.HeatCapacity;     % kJ/(kg*¡æ)
pi = data.BasicParam.pi;
gravity = data.BasicParam.gravity;                     % m/s^2
big_M = data.BasicParam.big_M;
heat_coefficient = 1/3600*c_w;   % MWh/(t*¡æ)
eta_pump = data_pipe(data_pipe(:,loc_flag_pump)==1, loc_eta_pump);
% %
num_initialtime = data.initialParam.heatingnetwork.num_initialtime;
num_heatperiod = data.period*data.interval.electricity/data.interval.heat;  % h
num_start = num_initialtime+1;
num_end = num_initialtime+num_heatperiod;

% %
num_pipe = size(data_pipe,1);
num_node = size(data_node,1);
num_source = sum(data_node(:,loc_nodetype) == 0);
num_load = sum(data_node(:,loc_nodetype) == 2);
num_pump = sum(data_pipe(:,loc_flag_pump) == 1);
data_Tau_sur = ones(num_initialtime+num_heatperiod,1)*data_initial.temperature(loc_initial_Tau_amb);

%% Calculate basic parameters
Area_pipe = data_pipe(:,loc_diameter).^2*pi/4;
Length_pipe = data_pipe(:,loc_length);
heatloss_ratio = 1e-3*data_pipe(:,loc_conductivity).*Length_pipe;  % MW/(m*K) * m
data.heatingnetwork.Area = Area_pipe;
data.heatingnetwork.Length = Length_pipe;
data.heatingnetwork.heatloss_ratio = heatloss_ratio;
Massflow_max = model.record.bounds(end).heatingnetwork.Massflow_max;
Massflow_min = model.record.bounds(end).heatingnetwork.Massflow_min;
Tau_pipe_s_in_max = model.record.bounds(end).heatingnetwork.Tau_pipe_s_in_max;
Tau_pipe_s_in_min = model.record.bounds(end).heatingnetwork.Tau_pipe_s_in_min;
Tau_pipe_s_out_max = model.record.bounds(end).heatingnetwork.Tau_pipe_s_out_max;
Tau_pipe_s_out_min = model.record.bounds(end).heatingnetwork.Tau_pipe_s_out_min;
Tau_pipe_r_in_max = model.record.bounds(end).heatingnetwork.Tau_pipe_r_in_max;
Tau_pipe_r_in_min = model.record.bounds(end).heatingnetwork.Tau_pipe_r_in_min;
Tau_pipe_r_out_max = model.record.bounds(end).heatingnetwork.Tau_pipe_r_out_max;
Tau_pipe_r_out_min = model.record.bounds(end).heatingnetwork.Tau_pipe_r_out_min;
aux_alpha_max = model.record.bounds(end).heatingnetwork.aux_alpha_max;
aux_alpha_min = model.record.bounds(end).heatingnetwork.aux_alpha_min;
aux_beta_max = model.record.bounds(end).heatingnetwork.aux_beta_max;
aux_beta_min = model.record.bounds(end).heatingnetwork.aux_beta_min;
h_pipe_s_in_max = heat_coefficient*Massflow_max.*Tau_pipe_s_in_max;  % MW
h_pipe_s_in_min = heat_coefficient*Massflow_min.*Tau_pipe_s_in_min;
h_pipe_r_in_max = heat_coefficient*Massflow_max.*Tau_pipe_r_in_max;
h_pipe_r_in_min = heat_coefficient*Massflow_min.*Tau_pipe_r_in_min;
% h_pipe_s_out_max = heat_coefficient*Massflow_max.*Tau_pipe_s_out_max;
% h_pipe_s_out_min = heat_coefficient*Massflow_min.*Tau_pipe_s_out_min;
% h_pipe_r_out_max = heat_coefficient*Massflow_max.*Tau_pipe_r_out_max;
% h_pipe_r_out_min = heat_coefficient*Massflow_min.*Tau_pipe_r_out_min;
Pressure_node_max = model.record.bounds(end).heatingnetwork.Pressure_node_max;
Pressure_node_min = model.record.bounds(end).heatingnetwork.Pressure_node_min;
num_aux = size(model.record.bounds.heatingnetwork.aux_beta_max,1);

%%
define_variables();                % % Define variables
Initilize_initialtime();           % % Initialize num_initialtime
Fix_known_variables();             % % Fix known variables();
%% Thermal Constraints
Cons_ThermalBalance_source_load();  % % Thermal balance at source & load nodes
Cons_ThermalBalance_node();         % % Thermal balance and temperature mixing at cross node (4g)

% % aux_alpha aux_beta
Cons_aux_alpha_beta();
McCormick_aux_alpha_beta();
SOC_aux_alpha_beta();

% % aux_M
Cons_aux_M();
McCormick_aux_M();
SOC_aux_M();

% % aux_h
McCormick_aux_h();                  % McMormick envelope: linearization of aux_h_in & aux_h_out
SOC_aux_h();
Cons_aux_h_out();                   % Cons of aux_h_out
% % heat loss
t = num_start:num_end;
model.cons = model.cons + (( ...
    model.var.heatingnetwork.h_pipe_s_out(t,:) == model.var.heatingnetwork.aux_h_pipe_s_out - ...
    ones(num_heatperiod,1)*(data_pipe(:,loc_conductivity).*data_pipe(:,loc_length))'/1e3 .* ...
    (model.var.heatingnetwork.Tau_pipe_s_in(t,:) - data_initial.temperature(loc_initial_Tau_amb) )) : '');

model.cons = model.cons + (( ...
    model.var.heatingnetwork.h_pipe_r_out(t,:) == model.var.heatingnetwork.aux_h_pipe_r_out - ...
    ones(num_heatperiod,1)*(data_pipe(:,loc_conductivity).*data_pipe(:,loc_length))'/1e3 .* ...
    (model.var.heatingnetwork.Tau_pipe_r_in(t,:) - data_initial.temperature(loc_initial_Tau_amb) )) : '');

% % Thermal power equation (4f)
McCormick_h();                     % McCormick envelope of heat power(8a)
SOC_h();

%% Hydraulic Constraints
Cons_hydraulic();
McCormick_Power_pump();
SOC_Power_pump();

%% Temperature limits (4h)
t = 1:num_heatperiod;
model.cons = model.cons + ((Tau_pipe_s_in_min(t,:) <= ...
    model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,:) <= ...
    Tau_pipe_s_in_max(t,:)) : '');
model.cons = model.cons + ((Tau_pipe_s_out_min(t,:) <= ...
    model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,:) <= ...
    Tau_pipe_s_out_max(t,:)) : '');
model.cons = model.cons + ((Tau_pipe_r_in_min(t,:) <= ...
    model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,:) <= ...
    Tau_pipe_r_in_max(t,:)) : '');
model.cons = model.cons + ((Tau_pipe_r_out_min(t,:) <= ...
    model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,:) <= ...
    Tau_pipe_r_out_max(t,:)) : '');


%% Consistency in each control period
interval = data.interval.electricity/data.interval.heat;
if interval >= 2
    for t = num_start:interval:num_end
        model.cons = model.cons + (( ...
            ones(interval-1,1)*model.var.heatingnetwork.Massflow(t,:) == ...
            model.var.heatingnetwork.Massflow(t+1:t+interval-1,:)) : '');
        model.cons = model.cons + (( ...
            ones(interval-1,1)*model.var.heatingnetwork.Tau_pipe_s_in(t,:) == ...
            model.var.heatingnetwork.Tau_pipe_s_in(t+1:t+interval-1,:)) : '');
    end
end

%% Final temperature constraints
model.cons = model.cons + (( ...
    model.var.heatingnetwork.Tau_pipe_s_in(end-data.interval.electricity/data.interval.heat + 1 : end,:) >= ...
    data_initial.temperature(loc_initial_Tau_s)) : '');

%% Energy balance
t = num_start:num_end;
model.cons = model.cons + (( ...
    sum(model.var.heatingnetwork.h_source(t,1)) >= ...
    sum(sum(model.var.heatingnetwork.h_load(t,:)))) : '');
model.cons = model.cons + (( ...
    sum(model.var.heatingnetwork.h_pipe_s_in(t,:),1) >= ...
    sum(model.var.heatingnetwork.h_pipe_s_out(t,:),1)) : '');
model.cons = model.cons + (( ...
    sum(model.var.heatingnetwork.h_pipe_r_in(t,:),1) >= ...
    sum(model.var.heatingnetwork.h_pipe_r_out(t,:),1)) : '');

% model.cons = model.cons + (( ...
%     sum(model.var.heatingnetwork.h_pipe_s_in(t,:),1) >= ...
%     sum(model.var.heatingnetwork.aux_h_pipe_s_out(:,:),1)) : '');
% model.cons = model.cons + (( ...
%     sum(model.var.heatingnetwork.h_pipe_r_in(t,:),1) >= ...
%     sum(model.var.heatingnetwork.aux_h_pipe_r_out(:,:),1)) : '');

%% cost
model.cons = model.cons + (( ...
    model.cost.heatingnetwork.pump == ...
    model.var.heatingnetwork.Power_pump) : '');
model.cons = model.cons + (( ...
    model.cost.heatingnetwork.sum == ...
    sum(model.cost.heatingnetwork.pump)) : '');

%%
if flag_CF && ~flag_CF_fixing_massflow
    t = num_start+1:num_end;
    model.cons = model.cons + (( ...
        ones(num_heatperiod-1,1)*model.var.heatingnetwork.Massflow(num_start,:) == ...
        model.var.heatingnetwork.Massflow(t,:)) : '');
end

%% fixing the supply temperature
t = 1:num_heatperiod;
model.cons = model.cons + ((...
    model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,1) == ...
    90) : '');


%%
if DisplayTime
    t1 = clock;
    fprintf('%10.2f%s\n', etime(t1,t0), 's');
end

%% *****************************************************************
%%                           Sub Function
%% *****************************************************************

%% -----------------------------------------------------------------
% % Define variables
    function define_variables()
        model.var.heatingnetwork = [];
        model.cost.heatingnetwork.pump = sdpvar(num_initialtime+num_heatperiod,1);
        model.cost.heatingnetwork.sum = sdpvar(1,1);
        model.var.heatingnetwork.Massflow = sdpvar(num_initialtime+num_heatperiod, num_pipe);   % t/h
        model.var.heatingnetwork.Pressure_loss = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.Pressure_ecv = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.Pressure_node = sdpvar(num_initialtime+num_heatperiod, num_node);
        model.var.heatingnetwork.Pressure_pump = sdpvar(num_initialtime+num_heatperiod, 1);
        model.var.heatingnetwork.Power_pump = sdpvar(num_initialtime+num_heatperiod, 1);
        model.var.heatingnetwork.Power_pump_1 = sdpvar(num_initialtime+num_heatperiod, 1);
        model.var.heatingnetwork.Power_pump_2 = sdpvar(num_initialtime+num_heatperiod, 1);
        %
        model.var.heatingnetwork.Tau_pipe_s_in = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.Tau_pipe_s_out = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.Tau_pipe_r_in = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.Tau_pipe_r_out = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        %
        model.var.heatingnetwork.h_pipe_s_in = sdpvar(num_initialtime+num_heatperiod, num_pipe);  % kW
        model.var.heatingnetwork.h_pipe_s_out = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.h_pipe_r_in = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        model.var.heatingnetwork.h_pipe_r_out = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        %
        model.var.heatingnetwork.h_source = sdpvar(num_initialtime+num_heatperiod, num_source);
        model.var.heatingnetwork.h_load = sdpvar(num_initialtime+num_heatperiod, num_load);
        
        % aux
        model.var.heatingnetwork.aux_alpha_product = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_beta_product = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_alpha = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_beta = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_M_alpha = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_M_beta = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_h_pipe_s_in_alpha = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_h_pipe_s_in_beta = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_h_pipe_r_in_alpha = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_h_pipe_r_in_beta = sdpvar(num_aux,num_pipe,num_heatperiod);
        model.var.heatingnetwork.aux_h_pipe_s_out = sdpvar(num_heatperiod, num_pipe);
        model.var.heatingnetwork.aux_h_pipe_r_out = sdpvar(num_heatperiod, num_pipe);
        
        % % soc
        if flag_SOC
            model.var.heatingnetwork.aux_alpha_product_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_alpha_product_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_beta_product_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_beta_product_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_M_alpha_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_M_alpha_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_M_beta_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_M_beta_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_s_in_alpha_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_s_in_alpha_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_s_in_beta_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_s_in_beta_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_r_in_alpha_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_r_in_alpha_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_r_in_beta_1 = sdpvar(num_aux,num_pipe,num_heatperiod);
            model.var.heatingnetwork.aux_h_pipe_r_in_beta_2 = sdpvar(num_aux,num_pipe,num_heatperiod);
            
            model.var.heatingnetwork.h_pipe_s_in_1 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_s_in_2 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_s_out_1 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_s_out_2 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_r_in_1 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_r_in_2 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_r_out_1 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
            model.var.heatingnetwork.h_pipe_r_out_2 = sdpvar(num_initialtime+num_heatperiod, num_pipe);
        end
    end

%% -----------------------------------------------------------------
% % Initialize num_initialtime
    function Initilize_initialtime()
        model.var.heatingnetwork.Tau_pipe_s_in(1:num_initialtime,:) = data_initial.temperature(loc_initial_Tau_s);
        model.var.heatingnetwork.Tau_pipe_r_in(1:num_initialtime,:) = data_initial.temperature(loc_initial_Tau_r);
        model.var.heatingnetwork.Tau_pipe_s_out(1:num_initialtime,:) = data_initial.temperature(loc_initial_Tau_s);
        model.var.heatingnetwork.Tau_pipe_r_out(1:num_initialtime,:) = data_initial.temperature(loc_initial_Tau_r);
        model.var.heatingnetwork.Massflow(1:num_initialtime,:) = ones(num_initialtime,1)*data_initial.massflow;
        model.var.heatingnetwork.h_pipe_s_in(1:num_initialtime,:) = heat_coefficient* ...
            model.var.heatingnetwork.Massflow(1:num_initialtime,:).*model.var.heatingnetwork.Tau_pipe_s_in(1:num_initialtime,:);
        model.var.heatingnetwork.h_pipe_s_out(1:num_initialtime,:) = heat_coefficient* ...
            model.var.heatingnetwork.Massflow(1:num_initialtime,:).*model.var.heatingnetwork.Tau_pipe_s_out(1:num_initialtime,:);
        model.var.heatingnetwork.h_pipe_r_in(1:num_initialtime,:) = heat_coefficient* ...
            model.var.heatingnetwork.Massflow(1:num_initialtime,:).*model.var.heatingnetwork.Tau_pipe_r_in(1:num_initialtime,:);
        model.var.heatingnetwork.h_pipe_r_out(1:num_initialtime,:) = heat_coefficient* ...
            model.var.heatingnetwork.Massflow(1:num_initialtime,:).*model.var.heatingnetwork.Tau_pipe_r_out(1:num_initialtime,:);
    end

%% -----------------------------------------------------------------
% % fixed known variables
    function Fix_known_variables()
        for t = 1:num_heatperiod
            for j = 1:num_pipe
                % Massflow
                if Massflow_max(t,j) == Massflow_min(t,j)
                    model.var.heatingnetwork.Massflow(t+num_initialtime,j) = ...
                        Massflow_min(t,j);
                end
                % Tau_pipe
                if Tau_pipe_s_in_max(t,j) == Tau_pipe_s_in_min(t,j)
                    model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,j) = ...
                        Tau_pipe_s_in_min(t,j);
                end
                if Tau_pipe_s_out_max(t,j) == Tau_pipe_s_out_min(t,j)
                    model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,j) = ...
                        Tau_pipe_s_out_min(t,j);
                end
                if Tau_pipe_r_in_max(t,j) == Tau_pipe_r_in_min(t,j)
                    model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,j) = ...
                        Tau_pipe_r_in_min(t,j);
                end
                if Tau_pipe_r_out_max(t,j) == Tau_pipe_r_out_min(t,j)
                    model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,j) = ...
                        Tau_pipe_r_out_min(t,j);
                end
            end
        end
        % % fixed known aux variables
        temp = (aux_alpha_max == aux_alpha_min);
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_alpha(temp) == ...
            aux_alpha_min(temp)) : '');
        %         model.var.heatingnetwork.aux_bin_alpha(temp) = ...
        %             floor(aux_alpha_min(temp));
        temp = (aux_beta_max == aux_beta_min);
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_beta(temp) == ...
            aux_beta_min(temp)) : '');
        %         model.var.heatingnetwork.aux_bin_beta(temp) = ...
        %             floor(aux_beta_min(temp));
        %         model.var.heatingnetwork.aux_bin_beta(1,:,:) = 1;
    end

%% -----------------------------------------------------------------
% % Thermal balance at source & load nodes
    function Cons_ThermalBalance_source_load()
        t = num_start:num_end;
        for k = 1:num_node
            % heat power balance at source node (4a)
            if data_node(k,loc_nodetype) == 0
                j = find(data_pipe(:,loc_fnode) == k);
                model.cons = model.cons + ((model.var.heatingnetwork.h_source(t,:) == ...
                    model.var.heatingnetwork.h_pipe_s_in(t,j) - ...
                    model.var.heatingnetwork.h_pipe_r_out(t,j)) : 'h_source'); %#ok<*BDSCA>
                % heat power balance at crossing node
            elseif data_node(k,loc_nodetype) == 1
                % heat power balance at load node (4b)
            elseif data_node(k,loc_nodetype) == 2
                j = find(data_pipe(:,loc_tnode) == k);
                model.cons = model.cons + (( ...
                    model.var.heatingnetwork.h_load(t, ...
                    sum(data_node(1:k,loc_nodetype) == 2)) == ...
                    model.var.heatingnetwork.h_pipe_s_out(t,j) - ...
                    model.var.heatingnetwork.h_pipe_r_in(t,j)) : 'h_load');
            end
        end
    end
%% -----------------------------------------------------------------
% % Thermal balance at intersection node
    function Cons_ThermalBalance_node()
        for k = 1:num_node
            % cross node
            if data_node(k,loc_nodetype) == 1
                set_pipe_head = find(data_pipe(:,loc_fnode) == k);
                set_pipe_tail = find(data_pipe(:,loc_tnode) == k);
                model.cons = model.cons + (( ...
                    sum(model.var.heatingnetwork.h_pipe_s_out(num_start:num_end,set_pipe_tail),2) == ...
                    sum(model.var.heatingnetwork.h_pipe_s_in(num_start:num_end,set_pipe_head),2)) : '');
                model.cons = model.cons + (( ...
                    sum(model.var.heatingnetwork.h_pipe_r_out(num_start:num_end,set_pipe_head),2) == ...
                    sum(model.var.heatingnetwork.h_pipe_r_in(num_start:num_end,set_pipe_tail),2)) : '');
                if length(set_pipe_head) >= 2
                    for j = 2:length(set_pipe_head)
                        model.cons = model.cons + (( ...
                            model.var.heatingnetwork.Tau_pipe_s_in(num_start:num_end,set_pipe_head(1)) == ...
                            model.var.heatingnetwork.Tau_pipe_s_in(num_start:num_end,set_pipe_head(j))) : '');
                    end
                end
                if length(set_pipe_tail) >= 2
                    for j = 2:length(set_pipe_tail)
                        model.cons = model.cons + (( ...
                            model.var.heatingnetwork.Tau_pipe_r_in(:,set_pipe_tail(1)) == ...
                            model.var.heatingnetwork.Tau_pipe_r_in(:,set_pipe_tail(j))) : '');
                    end
                end
            end
        end
    end
%% -----------------------------------------------------------------
% % Complementary constraints between aux_alpha aux_beta
    function Cons_aux_alpha_beta()
        % 0 <= aux_alpha <= 1
        if isa((0 <= model.var.heatingnetwork.aux_alpha(:,:,:) <= 1), 'constraint')
            model.cons = model.cons + ((0 <= ...
                model.var.heatingnetwork.aux_alpha(:,:,:) <= 1) : '');
        end
        % aux_alpha(i+1) - aux_alpha_product(i) = 0
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_alpha(2:end,:,:) - ...
            model.var.heatingnetwork.aux_alpha_product(1:end-1, :, :) == 0 ...
            ) : '');
        
        % beta(1) = 1
        if isa((model.var.heatingnetwork.aux_beta(1,:,:) == 1), 'constraint')
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_beta(1,:,:) == 1) : '');
        end
        % 0 <= aux_beta <= 1
        if isa((0 <= model.var.heatingnetwork.aux_beta(:,:,:) <= 1), 'constraint')
            model.cons = model.cons + ((0 <= ...
                model.var.heatingnetwork.aux_beta(:,:,:) <= 1) : '');
        end
        % aux_beta(i+1) - aux_beta_product(i) = 0
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_beta(2:end,:,:) - ...
            model.var.heatingnetwork.aux_beta_product(1:end-1, :, :) == 0 ...
            ) : '');
        
        % % Bounds of alpha & beta  (4d)-(4e)
        if isa((aux_alpha_min <= model.var.heatingnetwork.aux_alpha <= ...
                aux_alpha_max), 'constraint')
            model.cons = model.cons + (( ...
                aux_alpha_min <= ...
                model.var.heatingnetwork.aux_alpha <= ...
                aux_alpha_max) : '');
        end
        if isa((aux_beta_min <= ...
                model.var.heatingnetwork.aux_beta <= ...
                aux_beta_max), 'constraint')
            model.cons = model.cons + (( ...
                aux_beta_min <= ...
                model.var.heatingnetwork.aux_beta <= ...
                aux_beta_max): '');
        end
    end
%% -----------------------------------------------------------------
% % McCormick envelop of aux_alpha_product
    function McCormick_aux_alpha_beta()
        if flag_McCormick
            % % aux_alpha_product
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) >= ...
                aux_alpha_min(1:end-1,:,:) .* model.var.heatingnetwork.aux_alpha(2:end,:,:) + ...
                aux_alpha_min(2:end,:,:) .* model.var.heatingnetwork.aux_alpha(1:end-1,:,:) - ...
                aux_alpha_min(1:end-1,:,:) .* aux_alpha_min(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) >= ...
                aux_alpha_max(1:end-1,:,:) .* model.var.heatingnetwork.aux_alpha(2:end,:,:) + ...
                aux_alpha_max(2:end,:,:) .* model.var.heatingnetwork.aux_alpha(1:end-1,:,:) - ...
                aux_alpha_max(1:end-1,:,:) .* aux_alpha_max(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) <= ...
                aux_alpha_min(1:end-1,:,:) .* model.var.heatingnetwork.aux_alpha(2:end,:,:) + ...
                aux_alpha_max(2:end,:,:) .* model.var.heatingnetwork.aux_alpha(1:end-1,:,:) - ...
                aux_alpha_min(1:end-1,:,:) .* aux_alpha_max(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) <= ...
                aux_alpha_max(1:end-1,:,:) .* model.var.heatingnetwork.aux_alpha(2:end,:,:) + ...
                aux_alpha_min(2:end,:,:) .* model.var.heatingnetwork.aux_alpha(1:end-1,:,:) - ...
                aux_alpha_max(1:end-1,:,:) .* aux_alpha_min(2:end,:,:) ...
                ) : '');
            
            % % aux_beta_product
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) >= ...
                aux_beta_min(1:end-1,:,:) .* model.var.heatingnetwork.aux_beta(2:end,:,:) + ...
                aux_beta_min(2:end,:,:) .* model.var.heatingnetwork.aux_beta(1:end-1,:,:) - ...
                aux_beta_min(1:end-1,:,:) .* aux_beta_min(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) >= ...
                aux_beta_max(1:end-1,:,:) .* model.var.heatingnetwork.aux_beta(2:end,:,:) + ...
                aux_beta_max(2:end,:,:) .* model.var.heatingnetwork.aux_beta(1:end-1,:,:) - ...
                aux_beta_max(1:end-1,:,:) .* aux_beta_max(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) <= ...
                aux_beta_min(1:end-1,:,:) .* model.var.heatingnetwork.aux_beta(2:end,:,:) + ...
                aux_beta_max(2:end,:,:) .* model.var.heatingnetwork.aux_beta(1:end-1,:,:) - ...
                aux_beta_min(1:end-1,:,:) .* aux_beta_max(2:end,:,:) ...
                ) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) <= ...
                aux_beta_max(1:end-1,:,:) .* model.var.heatingnetwork.aux_beta(2:end,:,:) + ...
                aux_beta_min(2:end,:,:) .* model.var.heatingnetwork.aux_beta(1:end-1,:,:) - ...
                aux_beta_max(1:end-1,:,:) .* aux_beta_min(2:end,:,:) ...
                ) : '');
        end
        
        % % 0-1 linearization of bilinear terms
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_alpha_product) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) <= ...
            model.var.heatingnetwork.aux_alpha(1:end-1,:,:)) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_alpha_product(1:end-1,:,:) <= ...
            model.var.heatingnetwork.aux_alpha(2:end,:,:)) : '');
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_beta_product) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) <= ...
            model.var.heatingnetwork.aux_beta(1:end-1,:,:)) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_beta_product(1:end-1,:,:) <= ...
            model.var.heatingnetwork.aux_beta(2:end,:,:)) : '');
    end
%% -----------------------------------------------------------------
% % SOC of aux_alpha_product
    function SOC_aux_alpha_beta()
        if flag_SOC
            i = 1:num_aux-1;
            % % aux_alpha_product
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_alpha_product == ...
                model.var.heatingnetwork.aux_alpha_product_1 - ...
                model.var.heatingnetwork.aux_alpha_product_2) : '');
            
%             model.cons = model.cons + (( ...
%                 model.var.heatingnetwork.aux_alpha_product_1(i,:,:) >= ...
%                 P1(1,1)*model.var.heatingnetwork.aux_alpha(i,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i,:,:)+ ...
%                 P1(2,2)*model.var.heatingnetwork.aux_alpha(i+1,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i+1,:,:)+ ...
%                 (P1(1,2) + P1(2,1))*model.var.heatingnetwork.aux_alpha(i,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i+1,:,:) ...
%                 ) : '');
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.var.heatingnetwork.aux_alpha_product_1(i,:,:), 1, []); 
                reshape(model.var.heatingnetwork.aux_alpha(i,:,:) + ...
                model.var.heatingnetwork.aux_alpha(i+1,:,:),1, []); ...
                reshape(1 - model.var.heatingnetwork.aux_alpha_product_1(i,:,:), 1, [])]) : '');            
            
%             model.cons = model.cons + (( ...
%                 model.var.heatingnetwork.aux_alpha_product_2(i,:,:) >= ...
%                 P2(1,1)*model.var.heatingnetwork.aux_alpha(i,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i,:,:)+ ...
%                 P2(2,2)*model.var.heatingnetwork.aux_alpha(i+1,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i+1,:,:)+ ...
%                 (P2(1,2) + P2(2,1))*model.var.heatingnetwork.aux_alpha(i,:,:).* ...
%                 model.var.heatingnetwork.aux_alpha(i+1,:,:) ...
%                 ) : '');
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.var.heatingnetwork.aux_alpha_product_2(i,:,:), 1, []); 
                reshape(model.var.heatingnetwork.aux_alpha(i,:,:) - ...
                model.var.heatingnetwork.aux_alpha(i+1,:,:),1, []); ...
                reshape(1 - model.var.heatingnetwork.aux_alpha_product_2(i,:,:), 1, [])]) : '');            
                        
            % % aux_beta_product
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_beta_product == ...
                model.var.heatingnetwork.aux_beta_product_1 - ...
                model.var.heatingnetwork.aux_beta_product_2) : '');
            
%             model.cons = model.cons + (( ...
%                 model.var.heatingnetwork.aux_beta_product_1(i,:,:) >= ...
%                 P1(1,1)*model.var.heatingnetwork.aux_beta(i,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i,:,:)+ ...
%                 P1(2,2)*model.var.heatingnetwork.aux_beta(i+1,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i+1,:,:)+ ...
%                 (P1(1,2) + P1(2,1))*model.var.heatingnetwork.aux_beta(i,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i+1,:,:) ...
%                 ) : '');
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.var.heatingnetwork.aux_beta_product_1(i,:,:), 1, []); 
                reshape(model.var.heatingnetwork.aux_beta(i,:,:) + ...
                model.var.heatingnetwork.aux_beta(i+1,:,:),1, []); ...
                reshape(1 - model.var.heatingnetwork.aux_beta_product_1(i,:,:), 1, [])]) : '');            
    
%             model.cons = model.cons + (( ...
%                 model.var.heatingnetwork.aux_beta_product_2(i,:,:) >= ...
%                 P2(1,1)*model.var.heatingnetwork.aux_beta(i,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i,:,:)+ ...
%                 P2(2,2)*model.var.heatingnetwork.aux_beta(i+1,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i+1,:,:)+ ...
%                 (P2(1,2) + P2(2,1))*model.var.heatingnetwork.aux_beta(i,:,:).* ...
%                 model.var.heatingnetwork.aux_beta(i+1,:,:) ...
%                 ) : '');
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.var.heatingnetwork.aux_beta_product_2(i,:,:), 1, []); 
                reshape(model.var.heatingnetwork.aux_beta(i,:,:) - ...
                model.var.heatingnetwork.aux_beta(i+1,:,:),1, []); ...
                reshape(1 - model.var.heatingnetwork.aux_beta_product_2(i,:,:), 1, [])]) : '');            
        end
    end

%% -----------------------------------------------------------------
% % Constraints of aux_M
    function Cons_aux_M()
        model.cons = model.cons + (( 0 <=...
            model.var.heatingnetwork.aux_M_alpha) : '');
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_M_alpha <= ...
            model.var.heatingnetwork.aux_alpha*big_M) : '');
        model.cons = model.cons + (( 0 <= ...
            model.var.heatingnetwork.aux_M_beta) : '');
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.aux_M_beta <= ...
            model.var.heatingnetwork.aux_beta*big_M) : '');
        % % sum(aux_M_alpha*delta_t) = rho*S*L
        model.cons = model.cons + (( ...
            sum(model.var.heatingnetwork.aux_M_alpha(:,:,:), 1)*data.interval.heat == ...
            reshape(rho_w*Area_pipe.*Length_pipe*ones(1,num_heatperiod),[1,num_pipe,num_heatperiod])));
        % % sum(aux_M_beta*delta_t) = rho*S*L
        model.cons = model.cons + (( ...
            sum(model.var.heatingnetwork.aux_M_beta(2:end,:,:), 1)*data.interval.heat == ...
            reshape(rho_w*Area_pipe.*Length_pipe*ones(1,num_heatperiod), [1,num_pipe,num_heatperiod])));
    end
%% ------------------------------------
% % McMormick envelope: aux_M1 & aux_M2
    function McCormick_aux_M()
        % aux_M_alpha
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_alpha(i,:,t) >= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_alpha(i,:,t) >= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_alpha(i,:,t) <= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_alpha(i,:,t) <= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)))  : '');
            end
        end
        % aux_M_beta
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_beta(i,:,t) >= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_beta(i,:,t) >= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_beta(i,:,t) <= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*Massflow_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_M_beta(i,:,t) <= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*Massflow_min(t,:)))  : '');
            end
        end
        
        % 0-1 linearization of bilinear terms
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_M_alpha) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_M_alpha <= ...
            model.var.heatingnetwork.aux_alpha*big_M) : '');
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_M_beta) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_M_beta <= ...
            model.var.heatingnetwork.aux_beta*big_M) : '');
    end
%% -----------------------------------------------------------------
% % SOC of aux_M
    function SOC_aux_M()
        if flag_SOC
            i = 1:num_aux;
            % % aux_M_alpha
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_M_alpha == ...
                model.var.heatingnetwork.aux_M_alpha_1 - ...
                model.var.heatingnetwork.aux_M_alpha_2) : '');
            for t = 1:num_heatperiod
                % aux_M_alpha_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_alpha_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) + ...
                    model.SOC.ratio_aux_massflow*model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:),1,[]);
                    reshape(1 - model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_alpha_1(i,:,t),1,[])]) : '');
                % aux_M_alpha_2
                    model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_alpha_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) - ...
                    model.SOC.ratio_aux_massflow*model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:),1,[]);
                    reshape(1 - model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_alpha_2(i,:,t),1,[])]) : '');
            end
            
            % % aux_M_beta
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_M_beta == ...
                model.var.heatingnetwork.aux_M_beta_1 - ...
                model.var.heatingnetwork.aux_M_beta_2) : '');
            for t = 1:num_heatperiod
                % aux_M_beta_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_beta_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) + ...
                    model.SOC.ratio_aux_massflow*model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:),1,[]);
                    reshape(1 - model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_beta_1(i,:,t),1,[])]) : '');
                
                % aux_M_beta_2
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_beta_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) - ...
                    model.SOC.ratio_aux_massflow*model.var.heatingnetwork.Massflow(t+num_initialtime+1-i,:),1,[]);
                    reshape(1 - model.SOC.ratio_aux_massflow*model.var.heatingnetwork.aux_M_beta_2(i,:,t),1,[])]) : '');
            end
        end
    end

%% -----------------------------------------------------------------
% % McMormick envelope: linearization of aux_h_in
    function McCormick_aux_h()
        % aux_h_pipe_s_in_alpha
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_alpha(i,:,t) >= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_alpha(i,:,t) >= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_alpha(i,:,t) <= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_alpha(i,:,t) <= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)))  : '');
            end
        end
        % aux_h_pipe_s_in_beta
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_beta(i,:,t) >= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_beta(i,:,t) >= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_beta(i,:,t) <= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_s_in_beta(i,:,t) <= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*h_pipe_s_in_min(t,:)))  : '');
            end
        end
        
        % aux_h_pipe_r_in_alpha
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_alpha(i,:,t) >= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_alpha(i,:,t) >= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_alpha(i,:,t) <= ...
                    aux_alpha_min(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)) - ...
                    aux_alpha_min(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_alpha(i,:,t) <= ...
                    aux_alpha_max(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_alpha(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)) - ...
                    aux_alpha_max(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)))  : '');
            end
        end
        
        % aux_h_pipe_r_in_beta
        if flag_McCormick
            for t = 1:num_heatperiod
                i = 1:num_aux;
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_beta(i,:,t) >= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_beta(i,:,t) >= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_beta(i,:,t) <= ...
                    aux_beta_min(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)) - ...
                    aux_beta_min(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_max(t,:)))  : '');
                model.cons_McCormick = model.cons_McCormick + (( ...
                    model.var.heatingnetwork.aux_h_pipe_r_in_beta(i,:,t) <= ...
                    aux_beta_max(i,:,t) .* model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i,:) + ...
                    model.var.heatingnetwork.aux_beta(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)) - ...
                    aux_beta_max(i,:,t) .* (ones(num_aux,1)*h_pipe_r_in_min(t,:)))  : '');
            end
        end
        
        % % 0-1 linearization of bilinear terms
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_h_pipe_s_in_alpha) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_h_pipe_s_in_alpha <= ...
            model.var.heatingnetwork.aux_alpha*big_M) : '');
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_h_pipe_s_in_beta) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_h_pipe_s_in_beta <= ...
            model.var.heatingnetwork.aux_beta*big_M) : '');
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_h_pipe_r_in_alpha) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_h_pipe_r_in_alpha <= ...
            model.var.heatingnetwork.aux_alpha*big_M) : '');
        model.cons_McCormick = model.cons_McCormick + ((0 <= ...
            model.var.heatingnetwork.aux_h_pipe_r_in_beta) : '');
        model.cons_McCormick = model.cons_McCormick + (( ...
            model.var.heatingnetwork.aux_h_pipe_r_in_beta <= ...
            model.var.heatingnetwork.aux_beta*big_M) : '');
    end

%% -----------------------------------------------------------------
% % SOC of aux_h
    function SOC_aux_h()
        if flag_SOC
            i = 1:num_aux;
            % % aux_h_pipe_s_in_alpha
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_h_pipe_s_in_alpha == ...
                model.var.heatingnetwork.aux_h_pipe_s_in_alpha_1 - ...
                model.var.heatingnetwork.aux_h_pipe_s_in_alpha_2) : '');
            for t = 1:num_heatperiod
                % aux_h_pipe_s_in_alpha_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_alpha_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) + ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_alpha_1(i,:,t),1,[])]) : '');       
                
                % aux_h_pipe_s_in_alpha_2      
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_alpha_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) - ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_alpha_2(i,:,t),1,[])]) : '');
               
            end
            
            % % aux_h_pipe_r_in_alpha
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_h_pipe_r_in_alpha == ...
                model.var.heatingnetwork.aux_h_pipe_r_in_alpha_1 - ...
                model.var.heatingnetwork.aux_h_pipe_r_in_alpha_2) : '');
            for t = 1:num_heatperiod
                % aux_h_pipe_r_in_alpha_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_alpha_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) + ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_alpha_1(i,:,t),1,[])]) : '');       
                
                % aux_h_pipe_r_in_alpha_2
                    model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_alpha_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_alpha(i,:,t) - ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_alpha_2(i,:,t),1,[])]) : '');       
  
            end
            
            % % aux_h_pipe_s_in_beta
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_h_pipe_s_in_beta == ...
                model.var.heatingnetwork.aux_h_pipe_s_in_beta_1 - ...
                model.var.heatingnetwork.aux_h_pipe_s_in_beta_2) : '');
            for t = 1:num_heatperiod
                % aux_h_pipe_s_in_beta_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_beta_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) + ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_beta_1(i,:,t),1,[])]) : '');        
                
                % aux_h_pipe_s_in_beta_2
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_beta_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) - ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_s_in_beta_2(i,:,t),1,[])]) : '');                        
            end
            
            % % aux_h_pipe_r_in_beta
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.aux_h_pipe_r_in_beta == ...
                model.var.heatingnetwork.aux_h_pipe_r_in_beta_1 - ...
                model.var.heatingnetwork.aux_h_pipe_r_in_beta_2) : '');
            for t = 1:num_heatperiod
                % aux_h_pipe_r_in_beta_1
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_beta_1(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) + ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_beta_1(i,:,t),1,[])]) : '');        
                
                % aux_h_pipe_r_in_beta_2
                model.cons = model.cons + ( ...
                    cone([reshape(1 + model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_beta_2(i,:,t),1,[]);
                    reshape(model.var.heatingnetwork.aux_beta(i,:,t) - ...
                    model.SOC.ratio_aux_h*model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime+1-i, :), 1, []);
                    reshape(1 - model.SOC.ratio_aux_h*model.var.heatingnetwork.aux_h_pipe_r_in_beta_2(i,:,t),1,[])]) : '');                   
            end
        end
    end

%% -----------------------------------------------------------------
% % Cons of aux_h_out
    function Cons_aux_h_out()
        model.cons = model.cons + (( ...
            reshape(model.var.heatingnetwork.aux_h_pipe_s_out',  [1, num_pipe, num_heatperiod]) == ...
            sum(model.var.heatingnetwork.aux_h_pipe_s_in_beta, 1) - ...
            sum(model.var.heatingnetwork.aux_h_pipe_s_in_alpha, 1)) : '');
        model.cons = model.cons + (( ...
            reshape(model.var.heatingnetwork.aux_h_pipe_r_out', [1, num_pipe, num_heatperiod]) == ...
            sum(model.var.heatingnetwork.aux_h_pipe_r_in_beta, 1) -  ...
            sum(model.var.heatingnetwork.aux_h_pipe_r_in_alpha, 1)) : '');
    end

%% -----------------------------------------------------------------
% % McCormick envelope of h_pipe
    function McCormick_h()
        % s,in
        if flag_McCormick
            t = 1:num_heatperiod;
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,:) + ...
                Tau_pipe_s_in_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).* Tau_pipe_s_in_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,:) + ...
                Tau_pipe_s_in_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_s_in_max(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,:) + ...
                Tau_pipe_s_in_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_s_in_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_in(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_s_in(t+num_initialtime,:) + ...
                Tau_pipe_s_in_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_s_in_max(t,:))) : '');
            % s,out
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_out(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,:) + ...
                Tau_pipe_s_out_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).* Tau_pipe_s_out_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_out(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,:) + ...
                Tau_pipe_s_out_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_s_out_max(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_out(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,:) + ...
                Tau_pipe_s_out_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_s_out_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_s_out(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_s_out(t+num_initialtime,:) + ...
                Tau_pipe_s_out_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_s_out_max(t,:))) : '');
            % r,in
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,:) + ...
                Tau_pipe_r_in_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_r_in_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,:) + ...
                Tau_pipe_r_in_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_r_in_max(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,:) + ...
                Tau_pipe_r_in_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_r_in_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_in(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_r_in(t+num_initialtime,:) + ...
                Tau_pipe_r_in_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_r_in_max(t,:))) : '');
            % r,out
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_out(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,:) + ...
                Tau_pipe_r_out_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_r_out_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_out(t+num_initialtime,:) >= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,:) + ...
                Tau_pipe_r_out_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_r_out_max(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_out(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_max(t,:).*model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,:) + ...
                Tau_pipe_r_out_min(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_max(t,:).*Tau_pipe_r_out_min(t,:))) : '');
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.h_pipe_r_out(t+num_initialtime,:) <= heat_coefficient* ...
                (Massflow_min(t,:).*model.var.heatingnetwork.Tau_pipe_r_out(t+num_initialtime,:) + ...
                Tau_pipe_r_out_max(t,:).*model.var.heatingnetwork.Massflow(t+num_initialtime,:) - ...
                Massflow_min(t,:).*Tau_pipe_r_out_max(t,:))) : '');
        end
    end
%% -----------------------------------------------------------------
% % SOC of h_pipe
    function SOC_h()
        if flag_SOC
            t = num_start:num_end;
            % % h_pipe_s_in
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.h_pipe_s_in(t,:) == ...
                model.var.heatingnetwork.h_pipe_s_in_1(t,:) - ...
                model.var.heatingnetwork.h_pipe_s_in_2(t,:)) : '');
            % % h_pipe_s_in
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_in_1(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) + ...
                model.var.heatingnetwork.Tau_pipe_s_in(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_in_1(t,:),1,[])]) : '');
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_in_2(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) - ...
                model.var.heatingnetwork.Tau_pipe_s_in(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_in_2(t,:),1,[])]) : '');
            
            % % h_pipe_s_out
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.h_pipe_s_out(t,:) == ...
                model.var.heatingnetwork.h_pipe_s_out_1(t,:) - ...
                model.var.heatingnetwork.h_pipe_s_out_2(t,:)) : '');
            % % h_pipe_s_out
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_out_1(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) + ...
                model.var.heatingnetwork.Tau_pipe_s_out(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_out_1(t,:),1,[])]) : '');           
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_out_2(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) - ...
                model.var.heatingnetwork.Tau_pipe_s_out(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_s_out_2(t,:),1,[])]) : '');    
            
            % % h_pipe_r_in
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.h_pipe_r_in(t,:) == ...
                model.var.heatingnetwork.h_pipe_r_in_1(t,:) - ...
                model.var.heatingnetwork.h_pipe_r_in_2(t,:)) : '');
            % % h_pipe_r_in
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_in_1(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) + ...
                model.var.heatingnetwork.Tau_pipe_r_in(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_in_1(t,:),1,[])]) : '');                
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_in_2(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) - ...
                model.var.heatingnetwork.Tau_pipe_r_in(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_in_2(t,:),1,[])]) : '');               
            
            % % h_pipe_r_out
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.h_pipe_r_out(t,:) == ...
                model.var.heatingnetwork.h_pipe_r_out_1(t,:) - ...
                model.var.heatingnetwork.h_pipe_r_out_2(t,:)) : '');
            % % h_pipe_r_out
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_out_1(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) + ...
                model.var.heatingnetwork.Tau_pipe_r_out(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_out_1(t,:),1,[])]) : '');            
            
            model.cons = model.cons + ( ...
                cone([reshape(1 + model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_out_2(t,:),1,[]);
                sqrt(heat_coefficient)*reshape(model.SOC.ratio_h*model.var.heatingnetwork.Massflow(t,:) - ...
                model.var.heatingnetwork.Tau_pipe_r_out(t,:),1,[]);
                reshape(1 - model.SOC.ratio_h*model.var.heatingnetwork.h_pipe_r_out_2(t,:),1,[])]) : '');             
        end
    end

%% -----------------------------------------------------------------
% % Cons of hydraulic
    function Cons_hydraulic()
        % % mass flow balance (4i)
        t = num_start:num_end;
        for k = 1:num_node
            % cross node
            if data_node(k,loc_nodetype) == 1
                set_pipe_head = find(data_pipe(:,loc_fnode) == k);
                set_pipe_tail = find(data_pipe(:,loc_tnode) == k);
                if isa((sum(model.var.heatingnetwork.Massflow(t,set_pipe_tail),2) == ...
                        sum(model.var.heatingnetwork.Massflow(t,set_pipe_head),2)), 'constraint')
                    model.cons = model.cons + (( ...
                        sum(model.var.heatingnetwork.Massflow(t,set_pipe_tail),2) == ...
                        sum(model.var.heatingnetwork.Massflow(t,set_pipe_head),2)) : '');
                end
            end
        end
        % % pressure head balance of pipeline (4j)
        t = num_start:num_end;
        for j = 1:num_pipe
            fnode = data_pipe(j,loc_fnode);
            tnode = data_pipe(j,loc_tnode);
            model.cons = model.cons + (( ...
                model.var.heatingnetwork.Pressure_node(t,fnode) - ...
                model.var.heatingnetwork.Pressure_node(t,tnode) == ...
                model.var.heatingnetwork.Pressure_loss(t,j) + ...
                model.var.heatingnetwork.Pressure_ecv(t,j)) : '');
        end
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.Pressure_node(t,1) == ...
            model.var.heatingnetwork.Pressure_pump(t,1)) : '');
        
        % % pressure loss of pipeline (4k): (10b)
        t = 1:num_heatperiod;
        j = 1:num_pipe;
        model.cons = model.cons + ( ...
            cone([reshape(1 + model.var.heatingnetwork.Pressure_loss(t+num_initialtime,j),1,[]);
            reshape(2/3.6*sqrt(ones(num_heatperiod,1)*data_pipe(j,loc_rough)'),1,[]).* ...
            reshape(model.var.heatingnetwork.Massflow(t+num_initialtime,j),1,[]);
            reshape(1 - model.var.heatingnetwork.Pressure_loss(t+num_initialtime,j),1,[])]) : '');      
  
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.Pressure_loss(t+num_initialtime,j) <= ...
            ones(num_heatperiod,1)*data_pipe(j,loc_rough)' .* ...
            ((Massflow_max(t,j)+Massflow_min(t,j)).* ...
            model.var.heatingnetwork.Massflow(t+num_initialtime,j) - ...
            Massflow_max(t,j).*Massflow_min(t,j))/3.6^2) : '');
                
        % % pressure of electrical control valve (ecv)
        t = num_start:num_end;
        for j = 1:num_pipe
            if ~data_pipe(j,loc_flag_ecv)
                model.cons = model.cons + (( ...
                    model.var.heatingnetwork.Pressure_ecv(t,j) == 0) : '');
            else
                model.cons = model.cons + (( ...
                    model.var.heatingnetwork.Pressure_ecv(t,j) >= 0) : '');
            end
        end
        
        % % bounds of mass flow and pressure head (4m)-4(n)
        t = 1:num_heatperiod;
        if isa((Massflow_min(t,:) <= ...
                model.var.heatingnetwork.Massflow(t+num_initialtime,:) <= ...
                Massflow_max(t,:)), 'constraint')
            model.cons = model.cons + ((Massflow_min(t,:) ...
                <= model.var.heatingnetwork.Massflow(t+num_initialtime,:) <= ...
                Massflow_max(t,:)) : '');
        end
        model.cons = model.cons + (( ...
            Pressure_node_min <= ...
            model.var.heatingnetwork.Pressure_node(t+num_initialtime,:) <= ...
            Pressure_node_max) : '');
    end

%% -----------------------------------------------------------------
% % Power of pump
    function McCormick_Power_pump()
        if flag_McCormick
            % % Power of pump   g*f*m = m/s^2 * m * kg/s = kg*m^2/s^3 = W
            t = 1:num_heatperiod;
            i = 1:num_pump;
            % >= min min
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.Power_pump(t+num_initialtime,i) >= ...
                1/3600*gravity/eta_pump*( ...
                Pressure_node_min(:,i).*model.var.heatingnetwork.Massflow(t+num_initialtime,i) + ...
                Massflow_min(:,i).*model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) - ...
                Pressure_node_min(:,i).*Massflow_min(:,i))) : '');
            % >= max max
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.Power_pump(t+num_initialtime,i) >= ...
                1/3600*gravity/eta_pump*( ...
                Pressure_node_max(:,i).*model.var.heatingnetwork.Massflow(t+num_initialtime,i) + ...
                Massflow_max(:,i).*model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) - ...
                Pressure_node_max(:,i).*Massflow_max(:,i))) : '');
            % <= min max
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.Power_pump(t+num_initialtime,i) <= ...
                1/3600*gravity/eta_pump*( ...
                Pressure_node_min(:,i).*model.var.heatingnetwork.Massflow(t+num_initialtime,i) + ...
                Massflow_max(:,i).*model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) - ...
                Pressure_node_min(:,i).*Massflow_max(:,i))) : '');
            % <= max min
            model.cons_McCormick = model.cons_McCormick + (( ...
                model.var.heatingnetwork.Power_pump(t+num_initialtime,i) <= ...
                1/3600*gravity/eta_pump*( ...
                Pressure_node_max(:,i).*model.var.heatingnetwork.Massflow(t+num_initialtime,i) + ...
                Massflow_min(:,i).*model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) - ...
                Pressure_node_max(:,i).*Massflow_min(:,i))) : '');
        end
    end

%% -----------------------------------------------------------------
% % Power of pump
    function SOC_Power_pump()
        t = 1:num_heatperiod;
        i = 1:num_pump;
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.Power_pump >= 0) : '');
        model.cons = model.cons + (( ...
            model.var.heatingnetwork.Power_pump(t+num_initialtime,i) == ...
            model.var.heatingnetwork.Power_pump_1(t+num_initialtime,i) - ...
            model.var.heatingnetwork.Power_pump_2(t+num_initialtime,i)) : '');
        % Power_pump_1
        model.cons = model.cons + ( ...
            cone([reshape(1 + model.var.heatingnetwork.Power_pump_1(t+num_initialtime, i),1,[]);
            sqrt(1/3600*gravity/eta_pump) * ...
            reshape(model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) + ...
            model.var.heatingnetwork.Massflow(t+num_initialtime,i),1,[]);
            reshape(1 - model.var.heatingnetwork.Power_pump_1(t+num_initialtime, i),1,[])]) : '');
        % Power_pump_2
        model.cons = model.cons + ( ...
            cone([reshape(1 + model.var.heatingnetwork.Power_pump_2(t+num_initialtime, i),1,[]);
            sqrt(1/3600*gravity/eta_pump) * ...
            reshape(model.var.heatingnetwork.Pressure_pump(t+num_initialtime,i) - ...
            model.var.heatingnetwork.Massflow(t+num_initialtime,i),1,[]);
            reshape(1 - model.var.heatingnetwork.Power_pump_2(t+num_initialtime, i),1,[])]) : '');
    end

end
